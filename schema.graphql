"""
!!!!! CAUTION !!!!!!
This schema is no longer maintained and will be discontinued on September 30, 2023.
If anyone wishes to continue publishing this schema, we welcome Issues.
"""

"""
Personal access tokens
"""
type AccessToken implements Node {
  createdAt: DateTime!
  description: String!
  descriptionHtml: String!
  id: ID!

  """
  It returns true if (1) the access token is not revoked, and (2) the author of the access token is alive.
  """
  isActive: Boolean!
  isRevoked: Boolean!
  lastUsedAt: DateTime
  logs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AccessTokenLogConnection!
  path: String!
  scopes: [AccessTokenScope!]!
  title: String!

  """
  The secret token value, which is only available via `createAccessToken` mutation.
  """
  token: String
  updatedAt: DateTime!

  """
  The author of the access token
  """
  user: User!
}

"""
The connection type for AccessToken.
"""
type AccessTokenConnection {
  """
  A list of edges.
  """
  edges: [AccessTokenEdge]

  """
  A list of nodes.
  """
  nodes: [AccessToken!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AccessTokenEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AccessToken
}

"""
Usage logs for personal access tokens
"""
type AccessTokenLog implements Node {
  accessToken: AccessToken!
  createdAt: DateTime!
  id: ID!
  ipAddress: String!
  operationType: String!
  query: String!
  user: User!
  userAgent: String!
}

"""
The connection type for AccessTokenLog.
"""
type AccessTokenLogConnection {
  """
  A list of edges.
  """
  edges: [AccessTokenLogEdge]

  """
  A list of nodes.
  """
  nodes: [AccessTokenLog!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AccessTokenLogEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AccessTokenLog
}

enum AccessTokenScope {
  ADMINISTER @deprecated(reason: "Not yet implemented")
  READ
  WRITE
}

"""
Autogenerated input type of ArchiveFolder
"""
input ArchiveFolderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of ArchiveFolder.
"""
type ArchiveFolderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: Folder!
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
}

"""
Autogenerated input type of ArchiveFolders
"""
input ArchiveFoldersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ids: [ID!]!
}

"""
Autogenerated return type of ArchiveFolders.
"""
type ArchiveFoldersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folders: [Folder!]!
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
}

"""
Autogenerated input type of ArchiveGroup
"""
input ArchiveGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
}

"""
Autogenerated return type of ArchiveGroup.
"""
type ArchiveGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of ArchiveNote
"""
input ArchiveNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of ArchiveNote.
"""
type ArchiveNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
Autogenerated input type of ArchiveNotes
"""
input ArchiveNotesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ids: [ID!]!
}

"""
Autogenerated return type of ArchiveNotes.
"""
type ArchiveNotesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notes: [Note!]!
}

type AssistantConversation {
  assistantReferenceDocuments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AssistantReferenceDocumentConnection!
  id: ID!
}

type AssistantMessage {
  content: String
  contentHtml: String
  id: ID!
  status: AssistantMessageStatus!
}

enum AssistantMessageStatus {
  """
  Message has been spoken
  """
  ENDED

  """
  Message has been interupted
  """
  INTERUPTED

  """
  Message is pending
  """
  PENDING

  """
  Message is being spoken
  """
  SPEAKING
}

type AssistantReferenceDocument implements Node {
  id: ID!
  source: AssistantReferenceSource!
}

"""
The connection type for AssistantReferenceDocument.
"""
type AssistantReferenceDocumentConnection {
  """
  A list of edges.
  """
  edges: [AssistantReferenceDocumentEdge]

  """
  A list of nodes.
  """
  nodes: [AssistantReferenceDocument!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AssistantReferenceDocumentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AssistantReferenceDocument
}

type AssistantReferenceSource implements Node {
  author: User!
  id: ID!
  path: String!
  title: String!
  url: String!
}

"""
Autogenerated input type of AttachNoteToFolder
"""
input AttachNoteToFolderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: FolderInput!
  noteId: ID!
}

"""
Autogenerated return type of AttachNoteToFolder.
"""
type AttachNoteToFolderPayload {
  attachedFolder: Folder!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
  note: Note!
}

type Attachment implements Node {
  author: User!
  createdAt: DateTime!

  """
  The data of the attachment in binary. Prefer `data_url` if you use JSON for serializers
  """
  data: Blob!

  """
  The same value as `data` but encoded in data URL schema
  """
  dataUrl: String!
  id: ID!
  key: String!
  kind: AttachmentKind!

  """
  A MIME type detected from its data and name
  """
  mimeType: String!
  name: String!
  path: String!

  """
  The file size
  """
  size: Int!
  url: String!
}

"""
How and where the attachment is used.
"""
enum AttachmentKind {
  GENERAL
  GROUP_COVER_IMAGE
  USER_AVATAR_IMAGE
  USER_COVER_IMAGE
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

scalar Blob

"""
Kibela Web API budget like RateLimit of RESTful API
"""
type Budget {
  consumed: BigInt!

  """
  The point cost for the current query counting against the budget.
  """
  cost: BigInt!
  remaining: BigInt!
}

input ChatgptMessage {
  content: String!
  role: String!
}

"""
Autogenerated input type of CloseAnnouncement
"""
input CloseAnnouncementInput {
  announcementKey: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CloseAnnouncement.
"""
type CloseAnnouncementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
The Note coedit room type
"""
type CoeditRoom implements Node {
  activeUserAccounts: [String!]!

  """
  ID of the object.
  """
  id: ID!
}

"""
The contents of Note being edited in collab mode.
"""
type CollabModeData {
  content: String!
  contentHtml: String!
  contentTocHtml: String!
  folders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FolderConnection
  groups: [Group!]
  memberCount: Int!
  publishPlacesChanged: Boolean!
  title: String!
}

"""
A comment that belongs to a Note
"""
type Comment implements Node {
  anchor: String!
  author: User!
  canBeLiked: Boolean!
  canBeUpdated: Boolean!
  content: String!
  contentHtml: String!
  contentSummaryHtml: String!
  contentUpdatedAt: DateTime!
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ContributorOrder = {field: CONTRIBUTED_AT, direction: ASC}
  ): UserConnection!
  createdAt: DateTime!
  editedAt: DateTime
  id: ID!
  isEdited: Boolean!
  isLikedByCurrentUser: Boolean!
  likers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  path: String!
  publishedAt: DateTime
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommentReplyConnection!
  updatedAt: DateTime!
}

"""
The connection type for Comment.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]

  """
  A list of nodes.
  """
  nodes: [Comment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment
}

"""
The Comment Reply type
"""
type CommentReply implements Node {
  anchor: String!
  author: User!
  canBeLiked: Boolean!
  canBeUpdated: Boolean!
  content: String!
  contentHtml: String!
  contentSummaryHtml: String!
  contentUpdatedAt: DateTime!
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ContributorOrder = {field: CONTRIBUTED_AT, direction: ASC}
  ): UserConnection!
  createdAt: DateTime!
  editedAt: DateTime
  id: ID!
  isEdited: Boolean!
  isLikedByCurrentUser: Boolean!
  likers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  path: String!
  publishedAt: DateTime
  updatedAt: DateTime!
}

"""
The connection type for CommentReply.
"""
type CommentReplyConnection {
  """
  A list of edges.
  """
  edges: [CommentReplyEdge]

  """
  A list of nodes.
  """
  nodes: [CommentReply!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommentReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommentReply
}

"""
A contributor in the coedit mode
"""
input ContributorInput {
  account: String!
  joinOrder: Int!
}

input ContributorOrder {
  direction: OrderDirection = ASC
  field: ContributorOrderField = CONTRIBUTED_AT
}

"""
Properties by which contributors can be ordered.
"""
enum ContributorOrderField {
  CONTRIBUTED_AT
}

"""
Autogenerated input type of CreateAccessToken
"""
input CreateAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  scopes: [AccessTokenScope!]!
  title: String!
}

"""
Autogenerated return type of CreateAccessToken.
"""
type CreateAccessTokenPayload {
  """
  It includes the secret `token`, which you never see again.
  """
  accessToken: AccessToken!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateAssistantConversation
"""
input CreateAssistantConversationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  query: String!
}

"""
Autogenerated return type of CreateAssistantConversation.
"""
type CreateAssistantConversationPayload {
  assistantConversation: AssistantConversation!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateAssistantMessage
"""
input CreateAssistantMessageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  documentIds: [ID!]!
  messages: [ChatgptMessage!]!
}

"""
Autogenerated return type of CreateAssistantMessage.
"""
type CreateAssistantMessagePayload {
  assistantMessage: AssistantMessage!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateComment
"""
input CreateCommentInput {
  """
  You can set any user as the author.
  The default is the user who executes this mutation.
  Note that the contributors still include the user who executes this mutation in order to avoid spoofing.
  """
  authorId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  commentableId: ID!
  content: String!

  """
  The time when the comment is published. If not specified, `createdAt` is set to `publishedAt`
  """
  publishedAt: DateTime
}

"""
Autogenerated return type of CreateComment.
"""
type CreateCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: Comment!
}

"""
Autogenerated input type of CreateCommentReply
"""
input CreateCommentReplyInput {
  """
  You can set any user as the author.
  The default is the user who executes this mutation.
  Note that the contributors still include the user who executes this mutation in order to avoid spoofing.
  """
  authorId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  commentId: ID!
  content: String!

  """
  The time when the comment is published. If not specified, `createdAt` is set to `publishedAt`
  """
  publishedAt: DateTime
}

"""
Autogenerated return type of CreateCommentReply.
"""
type CreateCommentReplyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  reply: CommentReply!
}

"""
Autogenerated input type of CreateCustomEmoji
"""
input CreateCustomEmojiInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Up to 50 alphanumeric characters and underscores(_) can be used.
  """
  emojiCode: String!

  """
  BASE64 encoded image data URL
  """
  imageDataUrl: String!
}

"""
Autogenerated return type of CreateCustomEmoji.
"""
type CreateCustomEmojiPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customEmoji: CustomEmoji!
}

"""
Autogenerated input type of CreateDisabledUser
"""
input CreateDisabledUserInput {
  """
  `account` must be unique in the team
  """
  account: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  `email` must be unique in the team
  """
  email: String!
  realName: String!
  role: Role = FULL_MEMBER
}

"""
Autogenerated return type of CreateDisabledUser.
"""
type CreateDisabledUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of CreateFolder
"""
input CreateFolderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: FolderInput
}

"""
Autogenerated return type of CreateFolder.
"""
type CreateFolderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: Folder!
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
}

"""
Autogenerated input type of CreateFolderPin
"""
input CreateFolderPinInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Target folder. It is required when the note has 2 or more associated folders.
  """
  folder: FolderInput
  noteId: ID!
}

"""
Autogenerated return type of CreateFolderPin.
"""
type CreateFolderPinPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: Folder!
}

"""
Autogenerated input type of CreateGroup
"""
input CreateGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coverImageKey: String = null
  description: String!
  isPrivate: Boolean!
  name: String!
}

"""
Autogenerated return type of CreateGroup.
"""
type CreateGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of CreateGroupPin
"""
input CreateGroupPinInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
  noteId: ID!
}

"""
Autogenerated return type of CreateGroupPin.
"""
type CreateGroupPinPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of CreateNote
"""
input CreateNoteInput {
  """
  You can set any user as the author.
  The default is the user who executes this mutation.
  Note that the contributors still include the user who executes this mutation in order to avoid spoofing.
  """
  authorId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coediting: Boolean!
  content: String!
  draft: Boolean = false
  folderName: String @deprecated(reason: "Note can now have multiple folders, use folders instead.")
  folders: [FolderInput!]
  groupIds: [ID!]!

  """
  The time when the note is published. If `draft: true` is specified, the param is ignored.
  """
  publishedAt: DateTime
  title: String!
}

"""
Autogenerated return type of CreateNote.
"""
type CreateNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
Autogenerated input type of CreateNoteTemplate
"""
input CreateNoteTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coediting: Boolean!
  content: String!
  folders: [FolderInput!] = []
  groupIds: [ID!]!
  name: String!
  title: String!
}

"""
Autogenerated return type of CreateNoteTemplate.
"""
type CreateNoteTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteTemplate: NoteTemplate!
}

"""
Autogenerated input type of CreateReviewableDraftComment
"""
input CreateReviewableDraftCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  reviewableDraftId: ID!
}

"""
Autogenerated return type of CreateReviewableDraftComment.
"""
type CreateReviewableDraftCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: ReviewableDraftComment!
}

"""
The Custom Emoji type
"""
type CustomEmoji implements Node {
  createUser: User!
  createdAt: DateTime!
  emojiCode: String!
  id: ID!
  imageUrl: String!
}

"""
The connection type for CustomEmoji.
"""
type CustomEmojiConnection {
  """
  A list of edges.
  """
  edges: [CustomEmojiEdge]

  """
  A list of nodes.
  """
  nodes: [CustomEmoji!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CustomEmojiEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CustomEmoji
}

"""
A dashboard of a group
"""
type Dashboard implements Node {
  content: String!
  contentHtml: String!
  createdAt: DateTime!
  group: Group!
  id: ID!
  updatedAt: DateTime!
}

"""
A datetime type, encoded in ISO 8601 string in JSON, or timestamp type in MessagePack
"""
scalar DateTime

"""
Autogenerated input type of DeleteAttachment
"""
input DeleteAttachmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteAttachment.
"""
type DeleteAttachmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteComment
"""
input DeleteCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteComment.
"""
type DeleteCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteCommentReply
"""
input DeleteCommentReplyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteCommentReply.
"""
type DeleteCommentReplyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteCustomEmoji
"""
input DeleteCustomEmojiInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customEmojiId: ID!
}

"""
Autogenerated return type of DeleteCustomEmoji.
"""
type DeleteCustomEmojiPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteNote
"""
input DeleteNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteNote.
"""
type DeleteNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteNoteVersion
"""
input DeleteNoteVersionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteNoteVersion.
"""
type DeleteNoteVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DetachNoteFromFolder
"""
input DetachNoteFromFolderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: FolderInput!
  noteId: ID!
}

"""
Autogenerated return type of DetachNoteFromFolder.
"""
type DetachNoteFromFolderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  detachedFolder: Folder!
  note: Note!
}

"""
Autogenerated input type of DisableCollabModeStartDialog
"""
input DisableCollabModeStartDialogInput {
  account: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If specified, it will be used in preference to `account`
  """
  userId: ID
}

"""
Autogenerated return type of DisableCollabModeStartDialog.
"""
type DisableCollabModeStartDialogPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of DisableDraftReview
"""
input DisableDraftReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteId: ID!
}

"""
Autogenerated return type of DisableDraftReview.
"""
type DisableDraftReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  reviewableDraft: ReviewableDraft!
}

"""
Autogenerated input type of DisableOutgoingWebhook
"""
input DisableOutgoingWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DisableOutgoingWebhook.
"""
type DisableOutgoingWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  outgoingWebhook: OutgoingWebhook!
}

"""
Autogenerated input type of DisableSharedNoteCommentsFeature
"""
input DisableSharedNoteCommentsFeatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DisableSharedNoteCommentsFeature.
"""
type DisableSharedNoteCommentsFeaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DisableSharedNotesFeature
"""
input DisableSharedNotesFeatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DisableSharedNotesFeature.
"""
type DisableSharedNotesFeaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DisableUser
"""
input DisableUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DisableUser.
"""
type DisableUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of EnableCollabModeStartDialog
"""
input EnableCollabModeStartDialogInput {
  account: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If specified, it will be used in preference to `account`
  """
  userId: ID
}

"""
Autogenerated return type of EnableCollabModeStartDialog.
"""
type EnableCollabModeStartDialogPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of EnableDraftReview
"""
input EnableDraftReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteId: ID!
}

"""
Autogenerated return type of EnableDraftReview.
"""
type EnableDraftReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  reviewableDraft: ReviewableDraft!
}

"""
Autogenerated input type of EnableOutgoingWebhook
"""
input EnableOutgoingWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of EnableOutgoingWebhook.
"""
type EnableOutgoingWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  outgoingWebhook: OutgoingWebhook!
}

"""
Autogenerated input type of EnableSharedNoteCommentsFeature
"""
input EnableSharedNoteCommentsFeatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of EnableSharedNoteCommentsFeature.
"""
type EnableSharedNoteCommentsFeaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of EnableSharedNotesFeature
"""
input EnableSharedNotesFeatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of EnableSharedNotesFeature.
"""
type EnableSharedNotesFeaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
External URL's data for rich text editor.
"""
type ExternalUrlData {
  description: String
  favicon: String
  og: OpenGraph
  title: String
}

"""
A section of a feed, which includes notes in a folder
"""
type FeedFolderParcel {
  date: DateTime!
  folder: Folder!
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
}

"""
The kind to indicate what the feed is
"""
enum FeedKind {
  ALL
  GROUP
  MY_FEED
}

"""
The kind to indicate what the feed is
"""
enum FeedKindWithoutGroup {
  ALL
  MY_FEED
}

"""
A section of feed, which includes a note
"""
type FeedNote {
  date: DateTime!
  note: Note!
}

"""
A section of feed, which includes one or more notes
"""
union FeedSection = FeedFolderParcel | FeedNote | FeedUserParcel

type FeedSectionSimpleConnection {
  edges: [FeedSectionSimpleEdge!]!
  pageInfo: FeedSectionSimplePageInfo!
}

type FeedSectionSimpleEdge {
  node: FeedSection!
}

type FeedSectionSimplePageInfo {
  endCursor: String!
}

"""
A section of feed, which includes notes written by a user
"""
type FeedUserParcel {
  date: DateTime!
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  user: User!
}

type Folder implements Node {
  archivedAt: DateTime
  canBeManaged: Boolean!
  components: [Folder!]!
  createdAt: DateTime!
  descendantNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  fixedPath: String!
  folders(
    active: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FolderConnection!
  fullName: String!
  group: Group!
  id: ID!
  lastModifiedAt: DateTime
  name: String!
  newNotePath: String!
  notes(
    active: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    onlyCoediting: Boolean = false
    orderBy: NoteOrder = {field: CONTENT_UPDATED_AT, direction: DESC}
  ): NoteConnection!
  parent: Folder
  path: String!
  pinnedNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  unarchivableDescendantNoteTitles(limit: Int = 10): [String!]!
  unarchivableDescendantNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  updatedAt: DateTime!
}

"""
The connection type for Folder.
"""
type FolderConnection {
  """
  A list of edges.
  """
  edges: [FolderEdge]

  """
  A list of nodes.
  """
  nodes: [Folder!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type FolderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Folder
}

"""
Input folder with group struct
"""
input FolderInput {
  folderName: String!
  groupId: ID!
}

type Group implements Node {
  archivedAt: DateTime
  canBeJoined: Boolean!
  canBeManaged: Boolean!
  coverImage(density: Int!, size: GroupCoverImageSize!): GroupCoverImage!
  coverImageKey: String
  createdAt: DateTime!
  databaseId: Int! @deprecated(reason: "Provided only for legacy frontend.")
  description: String!
  feedUpdatedAt: DateTime
  folders(
    """
    If true is specified, it returns active folders. If false is specified, it
    returns archived folders. If it isn't specified, it returns both acitve or
    archived folders.
    """
    active: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Return the children of the specified folder. If null is specified, it returns root folders.
    """
    parentFolderId: ID

    """
    Return the children of the specified folders. If null is specified, it returns root folders.
    """
    parentFolderIds: [ID!]

    """
    If true is specified, it also returns children folders
    """
    withChildren: Boolean = false
  ): FolderConnection!
  id: ID!
  isArchived: Boolean!
  isDefault: Boolean!
  isJoined: Boolean!
  isPrivate: Boolean!
  isVisibilityChangeable: Boolean!
  name: String!
  notes(
    active: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    onlyNotAttachedFolder: Boolean = false
    orderBy: NoteOrder = {field: CONTENT_UPDATED_AT, direction: DESC}
  ): NoteConnection!
  path: String!
  pinnedNotes: [Note!]!
  todayContributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  trendNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  updatedAt: DateTime!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Abilities for groups.
"""
enum GroupAbility {
  ASSOCIATION_MANAGEABLE
  READABLE
}

"""
The connection type for Group.
"""
type GroupConnection {
  """
  A list of edges.
  """
  edges: [GroupEdge]

  """
  A list of nodes.
  """
  nodes: [Group!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Cover image of a group
"""
type GroupCoverImage {
  density: Int!
  height: Int!
  url: String!
  width: Int!
}

"""
The size class of group cover images
"""
enum GroupCoverImageSize {
  LARGE
  MEDIUM
}

"""
An edge in a connection.
"""
type GroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Group
}

"""
Autogenerated input type of IgnoreMultiFactorAuthn
"""
input IgnoreMultiFactorAuthnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of IgnoreMultiFactorAuthn.
"""
type IgnoreMultiFactorAuthnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
A user representation from importable services
"""
type ImportableUser {
  account: String!
  avatarUrl: String!
  realName: String!
}

"""
Internal URL's data for rich text editor.
"""
type InternalUrlData {
  avatar1xUrl: String
  avatar2xUrl: String
  isCoediting: Boolean!
  linkType: String!
  title: String!
}

"""
Message hints that suggest what happens in sending invitations
"""
enum InvitationHint {
  """
  They is already a member of the team. Nothing is done.
  """
  ALREADY_JOINED

  """
  The invitation has been sent to them.
  """
  INVITED

  """
  Those who is disabled before is now re-enabled. Nothing is done.
  """
  RE_ENABLED
}

"""
Autogenerated input type of Invite
"""
input InviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!

  """
  This message is displayed in the mail content of the user who received the invitation.
  """
  message: String = ""
  role: Role = FULL_MEMBER
}

"""
Autogenerated return type of Invite.
"""
type InvitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  hint: InvitationHint!
  role: Role!
}

"""
Autogenerated input type of JoinGroup
"""
input JoinGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
  userId: ID!
}

"""
Autogenerated return type of JoinGroup.
"""
type JoinGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of LeaveGroup
"""
input LeaveGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
  userId: ID!
}

"""
Autogenerated return type of LeaveGroup.
"""
type LeaveGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of Like
"""
input LikeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  likableId: ID!
}

"""
Autogenerated return type of Like.
"""
type LikePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  likers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Autogenerated input type of MarkNotificationsAsRead
"""
input MarkNotificationsAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of MarkNotificationsAsRead.
"""
type MarkNotificationsAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of MarkServiceNotificationsAsRead
"""
input MarkServiceNotificationsAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  serviceNotificationIds: [ID!]!
}

"""
Autogenerated return type of MarkServiceNotificationsAsRead.
"""
type MarkServiceNotificationsAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of MoveNoteToAnotherFolder
"""
input MoveNoteToAnotherFolderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Set folderName field to empty string if the note is not attached to any folder
  """
  fromFolder: FolderInput!
  noteId: ID!
  toFolder: FolderInput!
}

"""
Autogenerated return type of MoveNoteToAnotherFolder.
"""
type MoveNoteToAnotherFolderPayload {
  afterFolder: Folder!

  """
  Null when fromFolder.folderName argument is empty string
  """
  beforeFolder: Folder

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
  note: Note!
}

"""
Autogenerated input type of MoveNoteToAnotherGroup
"""
input MoveNoteToAnotherGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  fromGroupId: ID!
  noteId: ID!
  toGroupId: ID!
}

"""
Autogenerated return type of MoveNoteToAnotherGroup.
"""
type MoveNoteToAnotherGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
The top-level mutation type to mutate resources
"""
type Mutation {
  """
  Archive a folder
  """
  archiveFolder(
    """
    Parameters for ArchiveFolder
    """
    input: ArchiveFolderInput!
  ): ArchiveFolderPayload!

  """
  Archive folders
  """
  archiveFolders(
    """
    Parameters for ArchiveFolders
    """
    input: ArchiveFoldersInput!
  ): ArchiveFoldersPayload!

  """
  Archive a group
  """
  archiveGroup(
    """
    Parameters for ArchiveGroup
    """
    input: ArchiveGroupInput!
  ): ArchiveGroupPayload!

  """
  Archive a note
  """
  archiveNote(
    """
    Parameters for ArchiveNote
    """
    input: ArchiveNoteInput!
  ): ArchiveNotePayload!

  """
  Archive notes
  """
  archiveNotes(
    """
    Parameters for ArchiveNotes
    """
    input: ArchiveNotesInput!
  ): ArchiveNotesPayload!

  """
  Attach a note to folder
  """
  attachNoteToFolder(
    """
    Parameters for AttachNoteToFolder
    """
    input: AttachNoteToFolderInput!
  ): AttachNoteToFolderPayload!

  """
  Close an announcement
  """
  closeAnnouncement(
    """
    Parameters for CloseAnnouncement
    """
    input: CloseAnnouncementInput!
  ): CloseAnnouncementPayload!

  """
  It creates an access token
  """
  createAccessToken(
    """
    Parameters for CreateAccessToken
    """
    input: CreateAccessTokenInput!
  ): CreateAccessTokenPayload!

  """
  Create a conversation with the assistant
  """
  createAssistantConversation(
    """
    Parameters for CreateAssistantConversation
    """
    input: CreateAssistantConversationInput!
  ): CreateAssistantConversationPayload!

  """
  Create a new assistant message
  """
  createAssistantMessage(
    """
    Parameters for CreateAssistantMessage
    """
    input: CreateAssistantMessageInput!
  ): CreateAssistantMessagePayload!

  """
  Creates a comment
  """
  createComment(
    """
    Parameters for CreateComment
    """
    input: CreateCommentInput!
  ): CreateCommentPayload!

  """
  Creates a reply to the comment
  """
  createCommentReply(
    """
    Parameters for CreateCommentReply
    """
    input: CreateCommentReplyInput!
  ): CreateCommentReplyPayload!

  """
  Creates a custom emoji
  """
  createCustomEmoji(
    """
    Parameters for CreateCustomEmoji
    """
    input: CreateCustomEmojiInput!
  ): CreateCustomEmojiPayload!

  """
  It creates a disabled user with the specified profile. It requires  **administrative privileges**.
  """
  createDisabledUser(
    """
    Parameters for CreateDisabledUser
    """
    input: CreateDisabledUserInput!
  ): CreateDisabledUserPayload!

  """
  Creates a folder
  """
  createFolder(
    """
    Parameters for CreateFolder
    """
    input: CreateFolderInput!
  ): CreateFolderPayload!

  """
  Pin note to a folder
  """
  createFolderPin(
    """
    Parameters for CreateFolderPin
    """
    input: CreateFolderPinInput!
  ): CreateFolderPinPayload!

  """
  Creates a group. The current user is added as a group member.

  It may fail with the `UPGRADE_REQUIRED` error code if the plan is free and there is no room to create a new group.
  """
  createGroup(
    """
    Parameters for CreateGroup
    """
    input: CreateGroupInput!
  ): CreateGroupPayload!

  """
  Pin note to a group
  """
  createGroupPin(
    """
    Parameters for CreateGroupPin
    """
    input: CreateGroupPinInput!
  ): CreateGroupPinPayload!

  """
  Creates a note
  """
  createNote(
    """
    Parameters for CreateNote
    """
    input: CreateNoteInput!
  ): CreateNotePayload!

  """
  Create a note template
  """
  createNoteTemplate(
    """
    Parameters for CreateNoteTemplate
    """
    input: CreateNoteTemplateInput!
  ): CreateNoteTemplatePayload!

  """
  Creates a draft review comment
  """
  createReviewableDraftComment(
    """
    Parameters for CreateReviewableDraftComment
    """
    input: CreateReviewableDraftCommentInput!
  ): CreateReviewableDraftCommentPayload!

  """
  It deletes an attachment that is owned by the current user.
  """
  deleteAttachment(
    """
    Parameters for DeleteAttachment
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload!

  """
  Deletes a comment
  """
  deleteComment(
    """
    Parameters for DeleteComment
    """
    input: DeleteCommentInput!
  ): DeleteCommentPayload!

  """
  Deletes a reply to comment
  """
  deleteCommentReply(
    """
    Parameters for DeleteCommentReply
    """
    input: DeleteCommentReplyInput!
  ): DeleteCommentReplyPayload!

  """
  Deletes a custom emoji
  """
  deleteCustomEmoji(
    """
    Parameters for DeleteCustomEmoji
    """
    input: DeleteCustomEmojiInput!
  ): DeleteCustomEmojiPayload!

  """
  Deletes a note
  """
  deleteNote(
    """
    Parameters for DeleteNote
    """
    input: DeleteNoteInput!
  ): DeleteNotePayload!

  """
  Deletes a note version
  """
  deleteNoteVersion(
    """
    Parameters for DeleteNoteVersion
    """
    input: DeleteNoteVersionInput!
  ): DeleteNoteVersionPayload!

  """
  Detach a note from folder
  """
  detachNoteFromFolder(
    """
    Parameters for DetachNoteFromFolder
    """
    input: DetachNoteFromFolderInput!
  ): DetachNoteFromFolderPayload!

  """
  Disable the confirmation dialog appears when the user starts the collaboration mode
  """
  disableCollabModeStartDialog(
    """
    Parameters for DisableCollabModeStartDialog
    """
    input: DisableCollabModeStartDialogInput!
  ): DisableCollabModeStartDialogPayload!

  """
  Disable draft review of the specified note.
  """
  disableDraftReview(
    """
    Parameters for DisableDraftReview
    """
    input: DisableDraftReviewInput!
  ): DisableDraftReviewPayload!

  """
  Disable Outgoing Webhook
  """
  disableOutgoingWebhook(
    """
    Parameters for DisableOutgoingWebhook
    """
    input: DisableOutgoingWebhookInput!
  ): DisableOutgoingWebhookPayload!

  """
  Disable shared note comments feature in the team settings
  """
  disableSharedNoteCommentsFeature(
    """
    Parameters for DisableSharedNoteCommentsFeature
    """
    input: DisableSharedNoteCommentsFeatureInput!
  ): DisableSharedNoteCommentsFeaturePayload!

  """
  Disable shared notes feature in the team settings
  """
  disableSharedNotesFeature(
    """
    Parameters for DisableSharedNotesFeature
    """
    input: DisableSharedNotesFeatureInput!
  ): DisableSharedNotesFeaturePayload!

  """
  Disables a user. The current user must be an *admin* or *owner*.
  """
  disableUser(
    """
    Parameters for DisableUser
    """
    input: DisableUserInput!
  ): DisableUserPayload!

  """
  Enable the confirmation dialog appears when the user starts the collaboration mode
  """
  enableCollabModeStartDialog(
    """
    Parameters for EnableCollabModeStartDialog
    """
    input: EnableCollabModeStartDialogInput!
  ): EnableCollabModeStartDialogPayload!

  """
  Enable draft review of the specified note.
  """
  enableDraftReview(
    """
    Parameters for EnableDraftReview
    """
    input: EnableDraftReviewInput!
  ): EnableDraftReviewPayload!

  """
  Enable Outgoing Webhook
  """
  enableOutgoingWebhook(
    """
    Parameters for EnableOutgoingWebhook
    """
    input: EnableOutgoingWebhookInput!
  ): EnableOutgoingWebhookPayload!

  """
  Enable shared note comments feature in the team settings
  """
  enableSharedNoteCommentsFeature(
    """
    Parameters for EnableSharedNoteCommentsFeature
    """
    input: EnableSharedNoteCommentsFeatureInput!
  ): EnableSharedNoteCommentsFeaturePayload!

  """
  Enable shared notes feature in the team settings
  """
  enableSharedNotesFeature(
    """
    Parameters for EnableSharedNotesFeature
    """
    input: EnableSharedNotesFeatureInput!
  ): EnableSharedNotesFeaturePayload!

  """
  Ignore multi factor authn for 1 day.
  """
  ignoreMultiFactorAuthn(
    """
    Parameters for IgnoreMultiFactorAuthn
    """
    input: IgnoreMultiFactorAuthnInput!
  ): IgnoreMultiFactorAuthnPayload!

  """
  Invites a user with their email.
  Only owners and admins can invite users.

  It may fail with the `UPGRADE_REQUIRED` error code if the plan is free and there is no room to create a new user.
  """
  invite(
    """
    Parameters for Invite
    """
    input: InviteInput!
  ): InvitePayload!

  """
  Join a group
  """
  joinGroup(
    """
    Parameters for JoinGroup
    """
    input: JoinGroupInput!
  ): JoinGroupPayload!

  """
  Leave a group
  """
  leaveGroup(
    """
    Parameters for LeaveGroup
    """
    input: LeaveGroupInput!
  ): LeaveGroupPayload!

  """
  Like a note or comment
  """
  like(
    """
    Parameters for Like
    """
    input: LikeInput!
  ): LikePayload!
  markNotificationsAsRead(
    """
    Parameters for MarkNotificationsAsRead
    """
    input: MarkNotificationsAsReadInput!
  ): MarkNotificationsAsReadPayload!
  markServiceNotificationsAsRead(
    """
    Parameters for MarkServiceNotificationsAsRead
    """
    input: MarkServiceNotificationsAsReadInput!
  ): MarkServiceNotificationsAsReadPayload!

  """
  Move a note to another folder
  """
  moveNoteToAnotherFolder(
    """
    Parameters for MoveNoteToAnotherFolder
    """
    input: MoveNoteToAnotherFolderInput!
  ): MoveNoteToAnotherFolderPayload!

  """
  Move a note to another group
  """
  moveNoteToAnotherGroup(
    """
    Parameters for MoveNoteToAnotherGroup
    """
    input: MoveNoteToAnotherGroupInput!
  ): MoveNoteToAnotherGroupPayload!

  """
  Remove pinned note from a folder
  """
  removeFolderPin(
    """
    Parameters for RemoveFolderPin
    """
    input: RemoveFolderPinInput!
  ): RemoveFolderPinPayload!

  """
  Remove pinned note from a group
  """
  removeGroupPin(
    """
    Parameters for RemoveGroupPin
    """
    input: RemoveGroupPinInput!
  ): RemoveGroupPinPayload!

  """
  Restore an archived folder
  """
  restoreFolder(
    """
    Parameters for RestoreFolder
    """
    input: RestoreFolderInput!
  ): RestoreFolderPayload!

  """
  Restore an archived group
  """
  restoreGroup(
    """
    Parameters for RestoreGroup
    """
    input: RestoreGroupInput!
  ): RestoreGroupPayload!

  """
  Restore an archived note
  """
  restoreNote(
    """
    Parameters for RestoreNote
    """
    input: RestoreNoteInput!
  ): RestoreNotePayload!

  """
  It revokes an access token; the secret `token` is available after the access token is revoked.
  """
  revokeAccessToken(
    """
    Parameters for RevokeAccessToken
    """
    input: RevokeAccessTokenInput!
  ): RevokeAccessTokenPayload!

  """
  Set feed to home
  """
  setFeedToHome(
    """
    Parameters for SetFeedToHome
    """
    input: SetFeedToHomeInput!
  ): SetFeedToHomePayload!

  """
  Set group to home
  """
  setGroupToHome(
    """
    Parameters for SetGroupToHome
    """
    input: SetGroupToHomeInput!
  ): SetGroupToHomePayload!

  """
  Share specified note with outside of the team
  """
  shareNoteWithOutsideOfTeam(
    """
    Parameters for ShareNoteWithOutsideOfTeam
    """
    input: ShareNoteWithOutsideOfTeamInput!
  ): ShareNoteWithOutsideOfTeamPayload!

  """
  Sync last used editor for user
  """
  syncUserLastUsedEditor(
    """
    Parameters for SyncUserLastUsedEditor
    """
    input: SyncUserLastUsedEditorInput!
  ): SyncUserLastUsedEditorPayload! @deprecated(reason: "This is beta and internal feature.")

  """
  Transfer notes of a group to another
  """
  transferGroupNotes(
    """
    Parameters for TransferGroupNotes
    """
    input: TransferGroupNotesInput!
  ): TransferGroupNotesPayload!

  """
  Unlike a note or comment
  """
  unlike(
    """
    Parameters for Unlike
    """
    input: UnlikeInput!
  ): UnlikePayload!

  """
  Unshare specified note with outside of the team
  """
  unshareNoteWithOutsideOfTeam(
    """
    Parameters for UnshareNoteWithOutsideOfTeam
    """
    input: UnshareNoteWithOutsideOfTeamInput!
  ): UnshareNoteWithOutsideOfTeamPayload!

  """
  Unwatch a note
  """
  unwatchNote(
    """
    Parameters for UnwatchNote
    """
    input: UnwatchNoteInput!
  ): UnwatchNotePayload!

  """
  It updates attributes of an access token
  """
  updateAccessToken(
    """
    Parameters for UpdateAccessToken
    """
    input: UpdateAccessTokenInput!
  ): UpdateAccessTokenPayload!

  """
  Updates a comment
  """
  updateComment(
    """
    Parameters for UpdateComment
    """
    input: UpdateCommentInput!
  ): UpdateCommentPayload!

  """
  Updates a reply to comment
  """
  updateCommentReply(
    """
    Parameters for UpdateCommentReply
    """
    input: UpdateCommentReplyInput!
  ): UpdateCommentReplyPayload!

  """
  Update the content of dashboard without conflict-checking. Use updateDashboardContent to check conflict.
  """
  updateDashboard(
    """
    Parameters for UpdateDashboard
    """
    input: UpdateDashboardInput!
  ): UpdateDashboardPayload!

  """
  Update the content of a dashboard with simple conflict-checking
  """
  updateDashboardContent(
    """
    Parameters for UpdateDashboardContent
    """
    input: UpdateDashboardContentInput!
  ): UpdateDashboardContentPayload!

  """
  Update name of a folder
  """
  updateFolderName(
    """
    Parameters for UpdateFolderName
    """
    input: UpdateFolderNameInput!
  ): UpdateFolderNamePayload!

  """
  Update the folder parent
  """
  updateFolderParent(
    """
    Parameters for UpdateFolderParent
    """
    input: UpdateFolderParentInput!
  ): UpdateFolderParentPayload!

  """
  Update a group
  """
  updateGroup(
    """
    Parameters for UpdateGroup
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload!

  """
  Update a note, trying to merge conflicts with the 3-way diff algorithm
  """
  updateNote(
    """
    Parameters for UpdateNote
    """
    input: UpdateNoteInput!
  ): UpdateNotePayload!

  """
  Update the content of a note with conflict-checking, trying 3-way merging on conflicts
  """
  updateNoteContent(
    """
    Parameters for UpdateNoteContent
    """
    input: UpdateNoteContentInput!
  ): UpdateNoteContentPayload!

  """
  Replace all groups associated with the specified note
  """
  updateNoteGroups(
    """
    Parameters for UpdateNoteGroups
    """
    input: UpdateNoteGroupsInput!
  ): UpdateNoteGroupsPayload!

  """
  Update a note template
  """
  updateNoteTemplate(
    """
    Parameters for UpdateNoteTemplate
    """
    input: UpdateNoteTemplateInput!
  ): UpdateNoteTemplatePayload!

  """
  Update title of a note
  """
  updateNoteTitle(
    """
    Parameters for UpdateNoteTitle
    """
    input: UpdateNoteTitleInput!
  ): UpdateNoteTitlePayload!

  """
  Update team setting
  """
  updateTeamSetting(
    """
    Parameters for UpdateTeamSetting
    """
    input: UpdateTeamSettingInput!
  ): UpdateTeamSettingPayload!

  """
  Update notification setting of current user
  """
  updateUserNotificationSetting(
    """
    Parameters for UpdateUserNotificationSetting
    """
    input: UpdateUserNotificationSettingInput!
  ): UpdateUserNotificationSettingPayload!

  """
  Upload an attachment as files in markdown contents, avatars, or cover images.
  """
  uploadAttachment(
    """
    Parameters for UploadAttachment
    """
    input: UploadAttachmentInput!
  ): UploadAttachmentPayload!

  """
  Upload an attachment as files in markdown contents, avatars, or cover images.
  """
  uploadAttachmentWithDataUrl(
    """
    Parameters for UploadAttachmentWithDataUrl
    """
    input: UploadAttachmentWithDataUrlInput!
  ): UploadAttachmentWithDataUrlPayload!

  """
  Watch a note
  """
  watchNote(
    """
    Parameters for WatchNote
    """
    input: WatchNoteInput!
  ): WatchNotePayload!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
The Note type
"""
type Note implements Node {
  author: User
  canBeArchived: Boolean!
  canBeCommented: Boolean!
  canBeDestroyed: Boolean!
  canBeLiked: Boolean!
  canBeUpdated: Boolean!
  coeditRoom: CoeditRoom @deprecated(reason: "This is beta and internal feature.")
  coediting: Boolean!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommentConnection!
  commentsCount: Int!
  content: String!
  contentHtml: String!
  contentSummaryHtml: String!
  contentTocHtml: String!
  contentUpdatedAt: DateTime!
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ContributorOrder = {field: CONTRIBUTED_AT, direction: ASC}
  ): UserConnection!
  createdAt: DateTime!
  databaseId: Int! @deprecated(reason: "Provided only for legacy frontend.")
  editPath: String!
  folderName: String @deprecated(reason: "Note can now have multiple folders, use folders.")
  folders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FolderConnection!
  groups: [Group!]!
  hasCollabHistory: Boolean!
  id: ID!
  isArchived: Boolean!
  isLikedByCurrentUser: Boolean!
  likers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  path: String!
  publishedAt: DateTime
  relatedNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SearchResultConnection!
  reviewableDraft: ReviewableDraft
  selectableGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection!
  sharedNote: SharedNote
  title: String!
  trackbackNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  updatedAt: DateTime!
  url: String!
}

"""
Browsing history of notes
"""
type NoteBrowsingHistory implements Node {
  id: ID!
  note: Note
}

"""
The connection type for NoteBrowsingHistory.
"""
type NoteBrowsingHistoryConnection {
  """
  A list of edges.
  """
  edges: [NoteBrowsingHistoryEdge]

  """
  A list of nodes.
  """
  nodes: [NoteBrowsingHistory!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NoteBrowsingHistoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NoteBrowsingHistory
}

"""
The connection type for Note.
"""
type NoteConnection {
  """
  A list of edges.
  """
  edges: [NoteEdge]

  """
  A list of nodes.
  """
  nodes: [Note!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NoteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Note
}

"""
Note input struct, used to updateNote mutation
"""
input NoteInput {
  coediting: Boolean!
  content: String!
  folders: [FolderInput!]
  groupIds: [ID!]!
  title: String!
}

input NoteOrder {
  direction: OrderDirection = ASC
  field: NoteOrderField = TITLE
}

"""
Properties by which notes can be ordered.
"""
enum NoteOrderField {
  CONTENT_UPDATED_AT
  PUBLISHED_AT
  TITLE
}

"""
Template of note
"""
type NoteTemplate implements Node {
  content: String!
  createdAt: DateTime!
  evaluatedTitle: String!
  folders: [NoteTemplateFolder!]!
  groups: [Group!]!
  id: ID!
  name: String!
  title: String!
  updatedAt: DateTime!
}

"""
The connection type for NoteTemplate.
"""
type NoteTemplateConnection {
  """
  A list of edges.
  """
  edges: [NoteTemplateEdge]

  """
  A list of nodes.
  """
  nodes: [NoteTemplate!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NoteTemplateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NoteTemplate
}

"""
Folder for note template.
"""
type NoteTemplateFolder implements Node {
  createdAt: DateTime!
  evaluatedFullName: String!
  fullName: String!
  group: Group!
  id: ID!
  updatedAt: DateTime!
}

"""
Notifications you get in a Kibela team
"""
type Notification implements Node {
  createdAt: DateTime!
  id: ID!
  messageHtml: String!
  sender: User!
  sourcePath: String!
  state: NotificationState!
  updatedAt: DateTime!
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge]

  """
  A list of nodes.
  """
  nodes: [Notification!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

"""
The state of notifications
"""
enum NotificationState {
  READ
  UNREAD
}

"""
OpenGraph data.
"""
type OpenGraph {
  description: String
  image: OpenGraphImage
  title: String
  url: String
}

"""
OpenGraph Image
"""
type OpenGraphImage {
  alt: String
  height: Int
  secureUrl: String
  url: String
  width: Int
}

enum OrderDirection {
  ASC
  DESC
}

"""
Kind of the organization
"""
enum OrganizationKind {
  COMPANY
  OTHER
  PERSONAL
  UNKNOWN
}

"""
A outgoing_webhook
"""
type OutgoingWebhook implements Node {
  disabledAt: DateTime
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
The top-level query type to Kibela resources
"""
type Query {
  accessToken(id: ID!): AccessToken!
  accessTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    `true` to get revoked access tokens.
    """
    revoked: Boolean = false
  ): AccessTokenConnection!

  """
  The archived groups in the team including private ones
  """
  archivedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection!
  assistantConversation(id: String!): AssistantConversation
  assistantMessage(id: String!): AssistantMessage
  attachmentFromPath(
    """
    To get an attachment from its path (`/attachments/:id`) or URL
    """
    path: String!
  ): Attachment!
  budget: Budget!
  coeditToken(noteId: ID!): String! @deprecated(reason: "This is beta and internal feature.")
  collabModeData(noteId: ID!): CollabModeData @deprecated(reason: "This is an internal field.")
  comment(id: ID!): Comment!

  """
  The current user of the session
  """
  currentUser: User!
  customEmojiFromCode(code: String!): CustomEmoji!
  customEmojis(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomEmojiConnection!
  customEmojisCacheKey: String! @deprecated(reason: "This is an internal feature.")
  defaultGroup: Group
  externalUrlData(url: String!): ExternalUrlData! @deprecated(reason: "This is beta and internal feature.")
  feedSections(after: String, first: Int!, groupId: ID, kind: FeedKind): FeedSectionSimpleConnection!
  folder(id: ID!): Folder!
  folderFromPath(
    """
    Folder path `/folders/:id` or URL (`https://my.kibe.la/:path`).
    """
    path: String!
  ): Folder!

  """
  Returns all folders.
  Note that the field does not distinguish groups.
  If you need to fetch folders that is related a specific group, use GroupType.folders field.
  """
  folders(
    """
    If true is specified, it returns active folders. If false is specified, it
    returns archived folders. If it isn't specified, it returns both acitve or
    archived folders.
    """
    active: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Return the children of the specified folder. If null is specified, it returns root folders.
    """
    parentFolderId: ID

    """
    Return the children of the specified folders. If null is specified, it returns root folders.
    """
    parentFolderIds: [ID!]
  ): FolderConnection!
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
  group(id: ID!): Group!

  """
  The active groups in the team.
  """
  groups(
    """
    Specify ability of return groups. If it isn't specified, it returns readable groups.
    """
    ability: GroupAbility = READABLE

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection!
  importableUsers(encryptedAccessToken: String!, page: Int!, serviceType: String!, teamName: String!): [ImportableUser!]! @deprecated(reason: "This is an internal and deprecated field.")
  internalUrlData(url: String!): InternalUrlData @deprecated(reason: "This is beta and internal feature.")

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  note(id: ID!): Note!
  noteBrowsingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteBrowsingHistoryConnection!
  noteFromPath(
    """
    Note path (`/notes/:id` or `/@:account/:id`) or URL (`https://my.kibe.la/:path`).
    """
    path: String!
  ): Note!
  noteTemplate(id: ID!): NoteTemplate!
  noteTemplates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteTemplateConnection!

  """
  The connection of all the notes in the team. You *should* specify `orderBy` in production.
  """
  notes(
    active: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    folderId: ID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: NoteOrder = {field: CONTENT_UPDATED_AT, direction: DESC}
  ): NoteConnection!
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    state: NotificationState
  ): NotificationConnection!
  renderMarkdownToHtml(
    """
    Content in Kibela-Flavored Markdown
    """
    content: String!

    """
    Set `true` for the main content of a page, which allows elements that can affect the whole page, such as `<style/>`.
    """
    isMain: Boolean!
  ): String!
  reviewableDraft(id: ID!): ReviewableDraft!

  """
  Search note/comment
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    `true`/`false` to get coediting enabled/disabled notes. `null` to get all.
    """
    coediting: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    folderIds: [ID!]
    groupIds: [ID!]
    isArchived: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Array of likers' User ID.
    """
    likerIds: [ID!]

    """
    Search terms.
    """
    query: String!

    """
    Array of search resource kinds. `NOTE` and/or `COMMENT` can be specified. `null` to get all.
    """
    resources: [SearchResourceKind!]

    """
    Specify the sort order of search results.
    """
    sortBy: SearchSortKind = RELEVANT

    """
    Searching target period of time.
    """
    updated: SearchDate

    """
    Array of authors' User ID.
    """
    userIds: [ID!]
  ): SearchResultConnection!
  serviceNotifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ServiceNotificationConnection!
  sharedNote(id: ID!): SharedNote!

  """
  All the shared notes in the team.
  """
  sharedNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SharedNoteConnection!

  """
  All the access token logs in the team. This feature requires the administrative privileges
  """
  teamAccessTokenLogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AccessTokenLogConnection!
  user(id: ID!): User!
  userFromAccount(account: String!): User!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    confirmed: Boolean
    enabled: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    groupId: ID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): UserConnection!
  usersFromAccounts(
    accounts: [String!]!

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  validateToMove(
    folderIds: [ID!]!

    """
    Parent folder ID. `null` to move resources to the root
    """
    parentId: ID
  ): Boolean! @deprecated(reason: "This is internal feature.")
}

"""
Autogenerated input type of RemoveFolderPin
"""
input RemoveFolderPinInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Target folder. It is required when the note has 2 or more associated folders.
  """
  folder: FolderInput
  noteId: ID!
}

"""
Autogenerated return type of RemoveFolderPin.
"""
type RemoveFolderPinPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: Folder!
}

"""
Autogenerated input type of RemoveGroupPin
"""
input RemoveGroupPinInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
  noteId: ID!
}

"""
Autogenerated return type of RemoveGroupPin.
"""
type RemoveGroupPinPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of RestoreFolder
"""
input RestoreFolderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of RestoreFolder.
"""
type RestoreFolderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: Folder!
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
}

"""
Autogenerated input type of RestoreGroup
"""
input RestoreGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
}

"""
Autogenerated return type of RestoreGroup.
"""
type RestoreGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of RestoreNote
"""
input RestoreNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of RestoreNote.
"""
type RestoreNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
The Reviewable Draft type
"""
type ReviewableDraft {
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewableDraftCommentConnection!
  id: ID!
  isEnabled: Boolean!
  url: String!
}

"""
A comment that belongs to a reviewable drarft
"""
type ReviewableDraftComment implements Node {
  anchor: String!
  author: User!
  content: String!
  contentHtml: String!
  createdAt: DateTime!
  id: ID!
  path: String!
}

"""
The connection type for ReviewableDraftComment.
"""
type ReviewableDraftCommentConnection {
  """
  A list of edges.
  """
  edges: [ReviewableDraftCommentEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewableDraftComment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewableDraftCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewableDraftComment
}

"""
Autogenerated input type of RevokeAccessToken
"""
input RevokeAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  AccessToken ID
  """
  id: ID!
}

"""
Autogenerated return type of RevokeAccessToken.
"""
type RevokeAccessTokenPayload {
  accessToken: AccessToken!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
A role of a user
"""
enum Role {
  ADMIN
  FULL_MEMBER
  GUEST
  OWNER
  READ_ONLY @deprecated(reason: "Not implemented yet.")
}

enum SearchDate {
  ALL
  WITHIN_1_MONTH
  WITHIN_1_WEEK
  WITHIN_1_YEAR
  WITHIN_3_DAYS
  WITHIN_6_MONTHS
}

"""
Search target model type
"""
enum SearchResourceKind {
  COMMENT
  NOTE
}

"""
A search result that refers to a document
"""
type SearchResult {
  author: User!
  contentSummaryHtml: String!
  contentUpdatedAt: DateTime!

  """
  The original searchable document
  """
  document: SearchableDocument!
  path: String!
  title: String!
  titleHtml: String!
  url: String!
}

"""
The connection type for SearchResult.
"""
type SearchResultConnection {
  """
  A list of edges.
  """
  edges: [SearchResultEdge]

  """
  A list of nodes.
  """
  nodes: [SearchResult!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResult
}

enum SearchSortKind {
  RECENT
  RELEVANT
}

union SearchableDocument = Comment | CommentReply | Note

"""
Get the latest news and useful information from Kibela
"""
type ServiceNotification implements Node {
  id: ID!
  messageEn: String
  messageJa: String!
  notificationKind: ServiceNotificationKind!
  read: Boolean!
  startAt: DateTime!
  titleEn: String
  titleJa: String!
  urlEn: String
  urlJa: String
}

"""
The connection type for ServiceNotification.
"""
type ServiceNotificationConnection {
  """
  A list of edges.
  """
  edges: [ServiceNotificationEdge]

  """
  A list of nodes.
  """
  nodes: [ServiceNotification!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ServiceNotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ServiceNotification
}

"""
The kind of ServiceNotifications
"""
enum ServiceNotificationKind {
  GUIDE
  MAINTENANCE
  MARKETING
  NEW_FEATURE
  SUCCESS
}

"""
Autogenerated input type of SetFeedToHome
"""
input SetFeedToHomeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  feed: FeedKindWithoutGroup!
}

"""
Autogenerated return type of SetFeedToHome.
"""
type SetFeedToHomePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  feed: FeedKindWithoutGroup!
}

"""
Autogenerated input type of SetGroupToHome
"""
input SetGroupToHomeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
}

"""
Autogenerated return type of SetGroupToHome.
"""
type SetGroupToHomePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of ShareNoteWithOutsideOfTeam
"""
input ShareNoteWithOutsideOfTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteId: ID!
}

"""
Autogenerated return type of ShareNoteWithOutsideOfTeam.
"""
type ShareNoteWithOutsideOfTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
The Shared Note type
"""
type SharedNote implements Node {
  createdAt: DateTime!
  id: ID!
  note: Note!
  totalPageviews: Int!
  url: String!
}

"""
The connection type for SharedNote.
"""
type SharedNoteConnection {
  """
  A list of edges.
  """
  edges: [SharedNoteEdge]

  """
  A list of nodes.
  """
  nodes: [SharedNote!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SharedNoteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SharedNote
}

"""
Autogenerated input type of SyncUserLastUsedEditor
"""
input SyncUserLastUsedEditorInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  kind: UserLastUsedEditorKind!
}

"""
Autogenerated return type of SyncUserLastUsedEditor.
"""
type SyncUserLastUsedEditorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of TransferGroupNotes
"""
input TransferGroupNotesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  fromGroupId: ID!
  toGroupId: ID!
}

"""
Autogenerated return type of TransferGroupNotes.
"""
type TransferGroupNotesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  from: Group!
  to: Group!
}

"""
Autogenerated input type of Unlike
"""
input UnlikeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  likableId: ID!
}

"""
Autogenerated return type of Unlike.
"""
type UnlikePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  likers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Autogenerated input type of UnshareNoteWithOutsideOfTeam
"""
input UnshareNoteWithOutsideOfTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteId: ID!
}

"""
Autogenerated return type of UnshareNoteWithOutsideOfTeam.
"""
type UnshareNoteWithOutsideOfTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
Autogenerated input type of UnwatchNote
"""
input UnwatchNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteId: ID!
}

"""
Autogenerated return type of UnwatchNote.
"""
type UnwatchNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateAccessToken
"""
input UpdateAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  id: ID!
  scopes: [AccessTokenScope!]!
  title: String!
}

"""
Autogenerated return type of UpdateAccessToken.
"""
type UpdateAccessTokenPayload {
  accessToken: AccessToken!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateComment
"""
input UpdateCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  id: ID!
  touch: Boolean = true
}

"""
Autogenerated return type of UpdateComment.
"""
type UpdateCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: Comment!
}

"""
Autogenerated input type of UpdateCommentReply
"""
input UpdateCommentReplyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  id: ID!
  touch: Boolean = true
}

"""
Autogenerated return type of UpdateCommentReply.
"""
type UpdateCommentReplyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  reply: CommentReply!
}

"""
Autogenerated input type of UpdateDashboardContent
"""
input UpdateDashboardContentInput {
  baseContent: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A group ID for the dashboard
  """
  groupId: ID!
  newContent: String!
}

"""
Autogenerated return type of UpdateDashboardContent.
"""
type UpdateDashboardContentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dashboard: Dashboard!
}

"""
Autogenerated input type of UpdateDashboard
"""
input UpdateDashboardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  groupId: ID!
}

"""
Autogenerated return type of UpdateDashboard.
"""
type UpdateDashboardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dashboard: Dashboard!
}

"""
Autogenerated input type of UpdateFolderName
"""
input UpdateFolderNameInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  name: String!
}

"""
Autogenerated return type of UpdateFolderName.
"""
type UpdateFolderNamePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: Folder!
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
}

"""
Autogenerated input type of UpdateFolderParent
"""
input UpdateFolderParentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  New parent folder path (ex. aaa/bbb)
  """
  folderFullName: String

  """
  Target folder id
  """
  folderId: ID!
}

"""
Autogenerated return type of UpdateFolderParent.
"""
type UpdateFolderParentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  folder: Folder!
  foldersCacheKey: String! @deprecated(reason: "This is an internal feature.")
}

"""
Autogenerated input type of UpdateGroup
"""
input UpdateGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coverImageKey: String
  description: String
  id: ID!
  isPrivate: Boolean
  name: String
}

"""
Autogenerated return type of UpdateGroup.
"""
type UpdateGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  group: Group!
}

"""
Autogenerated input type of UpdateNoteContent
"""
input UpdateNoteContentInput {
  baseContent: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  newContent: String!

  """
  If false, content_updated_at is not touched.
  """
  touch: Boolean = true
}

"""
Autogenerated return type of UpdateNoteContent.
"""
type UpdateNoteContentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
Autogenerated input type of UpdateNoteGroups
"""
input UpdateNoteGroupsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupIds: [ID!]!
  noteId: ID!
}

"""
Autogenerated return type of UpdateNoteGroups.
"""
type UpdateNoteGroupsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
Autogenerated input type of UpdateNote
"""
input UpdateNoteInput {
  baseNote: NoteInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  closeCoeditRoom: Boolean @deprecated(reason: "This argument is for internal use only.")
  contributors: [ContributorInput!]
  draft: Boolean!
  id: ID!
  newNote: NoteInput!

  """
  It will be truncated to 100 characters if exceeded.
  """
  noteEditMemo: String
}

"""
Autogenerated return type of UpdateNote.
"""
type UpdateNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
Autogenerated input type of UpdateNoteTemplate
"""
input UpdateNoteTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coediting: Boolean!
  content: String!
  folders: [FolderInput!] = []
  groupIds: [ID!]!
  id: ID!
  name: String!
  title: String!
}

"""
Autogenerated return type of UpdateNoteTemplate.
"""
type UpdateNoteTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteTemplate: NoteTemplate!
}

"""
Autogenerated input type of UpdateNoteTitle
"""
input UpdateNoteTitleInput {
  baseTitle: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  newTitle: String!
}

"""
Autogenerated return type of UpdateNoteTitle.
"""
type UpdateNoteTitlePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: Note!
}

"""
Autogenerated input type of UpdateTeamSetting
"""
input UpdateTeamSettingInput {
  city: String = null

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String = null
  departmentName: String = null
  inChargeUserId: ID = null
  organizationKind: OrganizationKind = null
  organizationName: String = null
  phoneNumber: String = null
  postalCode: String = null
  state: String = null
  streetAddress: String = null
}

"""
Autogenerated return type of UpdateTeamSetting.
"""
type UpdateTeamSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateUserNotificationSetting
"""
input UpdateUserNotificationSettingInput {
  checked: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  kind: UserNotificationSettingKind!
}

"""
Autogenerated return type of UpdateUserNotificationSetting.
"""
type UpdateUserNotificationSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UploadAttachment
"""
input UploadAttachmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  data: Blob!

  """
  It indicates how and where the attachment is used.
  """
  kind: AttachmentKind!

  """
  The name of attachment, typically a filename.
  """
  name: String!
}

"""
Autogenerated return type of UploadAttachment.
"""
type UploadAttachmentPayload {
  attachment: Attachment!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UploadAttachmentWithDataUrl
"""
input UploadAttachmentWithDataUrlInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The data which encoded in Data URL scheme defined in RFC 2397
  """
  dataUrl: String!

  """
  It indicates how and where the attachment is used.
  """
  kind: AttachmentKind!

  """
  The name of attachment, typically a filename.
  """
  name: String!
}

"""
Autogenerated return type of UploadAttachmentWithDataUrl.
"""
type UploadAttachmentWithDataUrlPayload {
  attachment: Attachment!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
A user, which is an individual account of a team
"""
type User implements Node {
  account: String!
  avatarImage(density: Int = 1, size: UserAvatarImageSize = MEDIUM): UserAvatarImage!
  biography: String
  coverImage(density: Int = 1, size: UserCoverImageSize = MEDIUM): UserCoverImage

  """
  `email` requires administrative privileges because it is a kind of personal data.
  """
  email: String!
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection!
  id: ID!
  isOptOutCollabModeStartDialog: Boolean!

  """
  User's notes sorted by createdAt desc
  """
  latestNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  locale: String!
  path: String

  """
  User's popular notes
  """
  popularNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  User's draft notes
  """
  privateNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  realName: String!

  """
  User's notes sorted by contentUpdatedAt desc
  """
  recentNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
  role: Role!
  shortBio: String
  url: String
}

"""
An avatar image of users
"""
type UserAvatarImage {
  density: Int!
  height: Int!
  url: String!
  width: Int!
}

"""
The size class of user avatar images
"""
enum UserAvatarImageSize {
  LARGE
  MEDIUM
  SMALL
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A cover image of users
"""
type UserCoverImage {
  density: Int!
  height: Int!
  key: String!
  size: UserCoverImageSize!
  url: String!
  width: Int!
}

"""
The size class of user cover images
"""
enum UserCoverImageSize {
  MEDIUM
  ORIGINAL
  SMALL
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
The kind of user last used_editor
"""
enum UserLastUsedEditorKind {
  MARKDOWN_EDITOR
  RICH_TEXT_EDITOR
}

"""
The kind of user notification settings
"""
enum UserNotificationSettingKind {
  NEWSLETTER_MAIL
  SERVICE_NOTIFICATION_WEB
}

"""
Autogenerated input type of WatchNote
"""
input WatchNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  noteId: ID!

  """
  note_update or comment.
  """
  watchedAction: WatchState!
}

"""
Autogenerated return type of WatchNote.
"""
type WatchNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
State of watching note
"""
enum WatchState {
  WATCH_COMMENT
  WATCH_NOTE_UPDATE
}
